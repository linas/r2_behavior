#!/usr/bin/env python
PACKAGE = 'r2_behavior'

from dynamic_reconfigure.parameter_generator_catkin import *
#!/usr/bin/env python
PACKAGE = 'r2_behavior'

from dynamic_reconfigure.parameter_generator_catkin import *
import yaml_config

gen = ParameterGenerator()

gen.add("enable_flag", bool_t, 0, "enable behaviors", True)
gen.add("synthesizer_rate",double_t,0,"rate at which behavior is synthesized (Hz.)",10.0,1.0,100.0)

eye_contact_enum = gen.enum([
  gen.const("IDLE",int_t,0,"IDLE: do not make eye contact"),
  gen.const("LEFT_EYE",int_t,1,"LEFT_EYE: look at left eye"),
  gen.const("RIGHT_EYE",int_t,2,"RIGHT_EYE: look at right eye"),
  gen.const("BOTH_EYES",int_t,3,"BOTH_EYES: switch between looking at left eye and right eye"),
  gen.const("TRIANGLE",int_t,4,"TRIANGLE: switch between looking at left eye, right eye and mouth")
],"eye contact state")

gen.add("eyecontact_state",int_t,0,"eye contact state",0,0,4,edit_method=eye_contact_enum)

lookat_enum = gen.enum([
  gen.const("IDLE",int_t,0,"IDLE: not looking at anything. Looking within resting range"),
  gen.const("AVOID",int_t,1,"AVOID: avoid looking at anything"),
  gen.const("SALIENCY",int_t,2,"SALIENCY: look at generally interesting things"),
  gen.const("ONE_FACE",int_t,3,"ONE_FACE: look at the current face"),
  gen.const("ALL_FACES",int_t,4,"ALL_FACES: switch between looking at all faces"),
  gen.const("REGION",int_t,5,"REGION: look around attention region"),
  gen.const("HOLD", int_t, 6, "HOLD: do not turn head, keep it in the last position"),
],"lookat state")

region_enum = gen.enum([
  gen.const("AUDIENCE",int_t,0,"AUDIENCE"),
  gen.const("PRESENTER",int_t,1,"PRESENTER"),
  gen.const("OTHER",int_t,2,"OTHER: additional region or co-presenter"),
],"regions")


gen.add("lookat_state",int_t,0,"lookat state",0,0,7,edit_method=lookat_enum)

mirroring_enum = gen.enum([
  gen.const("IDLE",int_t,0,"IDLE: no mirroring"),
  gen.const("EYEBROWS",int_t,1,"EYEBROWS: mirror the eyebrows"),
  gen.const("EYELIDS",int_t,2,"EYELIDS: mirror the eyelids (blinking)"),
  gen.const("EYES",int_t,3,"EYES: mirror eyebrows and eyelids"),
  gen.const("MOUTH",int_t,4,"MOUTH: mirror the mouth opening and closing"),
  gen.const("MOUTH_EYEBROWS",int_t,5,"MOUTH_EYEBROWS: mirror the eyebrows and mouth opening and closing"),
  gen.const("MOUTH_EYELIDS",int_t,6,"MOUTH_EYELIDS: mirror the eyelids (blinking) and mouth opening and closing"),
  gen.const("ALL",int_t,7,"ALL: mirror the eyebrows, eyelids (blinking) and mouth opening and closing")
],"mirroring state")

gen.add("mirroring_state",int_t,0,"mirroring state",0,0,7,edit_method=mirroring_enum)

gaze_enum = gen.enum([
  gen.const("GAZE_ONLY",int_t,0,"GAZE_ONLY: only adjust gaze direction"),
  gen.const("HEAD_ONLY",int_t,1,"HEAD_ONLY: only adjust head direction"),
  gen.const("GAZE_AND_HEAD",int_t,2,"GAZE_AND_HEAD: adjust both gaze and head directions"),
  gen.const("GAZE_LEADS_HEAD",int_t,3,"GAZE_LEADS_HEAD: first adjust gaze, and after some delay slowly adjust head"),
  gen.const("HEAD_LEADS_GAZE",int_t,4,"HEAD_LEADS_GAZE: first adjust head, and after some delay slowly adjust gaze")
],"gaze state")

gen.add("gaze_state",int_t,0,"gaze state",0,0,4,edit_method=gaze_enum)
gen.add("attention_region",int_t,0,"attention region to look at",0,0,2,edit_method=region_enum)
gen.add("keep_time",double_t,0,"time to keep observations around as useful (sec.)",0.5,0.1,10.0)
gen.add("saliency_time_min",double_t,0,"minimum time between each saliency switch (sec.)",0.5,0.1,10.0)
gen.add("saliency_time_max",double_t,0,"maximum time between each saliency switch (sec.)",2.0,0.1,10.0)
gen.add("faces_time_min",double_t,0,"minimum time between each face switch (sec.)",0.5,0.1,10.0)
gen.add("faces_time_max",double_t,0,"maximum time between each face switch (sec.)",2.0,0.1,10.0)
gen.add("eyes_time_min",double_t,0,"minimum time between each eye switch (sec.)",0.5,0.1,10.0)
gen.add("eyes_time_max",double_t,0,"maximum time between each eye switch (sec.)",2.0,0.1,10.0)
gen.add("region_time_min",double_t,0,"minimum time between each region switch (sec.)",0.5,0.1,10.0)
gen.add("region_time_max",double_t,0,"maximum time between each region switch (sec.)",2.0,0.1,10.0)
gen.add("head_speed",double_t,0,"Speed to move head",1,0.2,3)
gen.add("rest_range_x",double_t,0,"left/right range for head idle pos (in meters, with 1m depth) ",0.25,0,1)
gen.add("rest_range_y",double_t,0,"up/down range for head idle pos (in meters, with 1m depth) ",0.25,0,1)
gen.add("rest_time_min",double_t,0,"minimum time between rest position switch (sec.)",4.0,1.0,20.0)
gen.add("rest_time_max",double_t,0,"maximum time between each region switch (sec.)",8.0,1.0,20.0)
gen.add("min_time_between_targets",double_t,0,"Minimum time between different targets",2.0,0.1,5.0)
# Remove to main states
gen.add("face_state_decay",double_t,0,"time before returning to IDLE after having talked/seen a face (sec.)",2.0,0.5,20.0)

gen.add("gaze_delay",double_t,0,"gaze following delay time (sec.)",1.0,0.5,20.0)
gen.add("gaze_speed",double_t,0,"speed setting for following gaze/head adjustments",0.5,0.5,20.0)

gen.add("interrupt_to_all_faces",bool_t,0,"True if robot should interrupt and look at all faces briefly",False)
gen.add("all_faces_start_time_min",double_t,0,"minimum time between addressing all faces during state (sec.)",4.0,0.5,20.0)
gen.add("all_faces_start_time_max",double_t,0,"maximum time between addressing all faces during state (sec.)",6.0,0.5,20.0)
gen.add("all_faces_duration_min",double_t,0,"minimum duration of addressing all faces during state (sec.)",2.0,0.5,20.0)
gen.add("all_faces_duration_max",double_t,0,"maximum duration of addressing all faces during state (sec.)",4.0,0.5,20.0)

exit(gen.generate(PACKAGE, "attention", "Attention"))
